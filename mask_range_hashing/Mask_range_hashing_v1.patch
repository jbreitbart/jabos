From 9a9e1a7787ed5acc399eeb9fe42f862a2fbe572d Mon Sep 17 00:00:00 2001
From: Jens Breitbart <jbreitbart@gmail.com>
Date: Thu, 2 Apr 2015 14:10:37 +0200
Subject: [PATCH] Added first version of _Mask_range_hashing. And removed
 trailing whitespaces.

---
 libstdc++-v3/include/bits/hashtable_policy.h | 69 +++++++++++++++++++++++++++-
 1 file changed, 67 insertions(+), 2 deletions(-)

diff --git a/libstdc++-v3/include/bits/hashtable_policy.h b/libstdc++-v3/include/bits/hashtable_policy.h
index 14bcca6..e53cc46 100644
--- a/libstdc++-v3/include/bits/hashtable_policy.h
+++ b/libstdc++-v3/include/bits/hashtable_policy.h
@@ -503,6 +503,71 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
     mutable std::size_t	_M_next_resize;
   };
 
+  // Compute mask using in _Mask_range_hashing
+  // mask := (smallest power of two greater or equal than __den) - 1
+  template <std::size_t SHIFT>
+  static inline std::size_t
+  _Mask_range_hashing_compute_mask(std::size_t n)
+  {
+      n = _Mask_range_hashing_compute_mask<SHIFT/2>(n);
+      n |= n >> SHIFT;
+      return n;
+  }
+
+  // End recursion for compute_mask used in _Mask_range_hashing
+  template<>
+  inline std::size_t
+  _Mask_range_hashing_compute_mask<1>(std::size_t n)
+  {
+      n |= n >> 1;
+      return n;
+  }
+
+  // Specialization of compute_mask used in _Mask_range_hashing for 64bit systems
+  template<>
+  inline std::size_t
+  _Mask_range_hashing_compute_mask<32>(std::size_t n)
+  {
+      n |= n >> 1;
+      n |= n >> 2;
+      n |= n >> 4;
+      n |= n >> 8;
+      n |= n >> 16;
+      n |= n >> 32;
+      return n;
+  }
+
+  /// Range hashing function using masking to fold a large number into the
+  /// range [0, N). We use a mask larger than the number of buckets. In case
+  /// result of the masking is not a valid bucket number, we fall back to modulo
+  /// as it is used in _Mod_range_hashing.
+  struct _Mask_range_hashing
+  {
+      typedef std::size_t first_argument_type;
+      typedef std::size_t second_argument_type;
+      typedef std::size_t result_type;
+
+      // mutable because it must be changed within operator()
+      mutable std::size_t _M_mask;
+
+      _Mask_range_hashing() : _M_mask(1) {}
+
+      result_type
+      operator()(first_argument_type __num,
+             second_argument_type __den) const noexcept
+      {
+          if (_M_mask < __den) {
+              _M_mask = _Mask_range_hashing_compute_mask<sizeof(std::size_t)*8/2>(__den - 1);
+          }
+          const std::size_t probe = (__num & _M_mask);
+          // probe could be greater than the number of buckets since mask can be
+          // greater. Do a modulo operation only if that is the case
+          const std::size_t b = (probe < __den) ? probe : (__num % __den);
+
+          return b;
+      }
+  };
+
   // Base classes for std::_Hashtable.  We define these base classes
   // because in some cases we want to do different things depending on
   // the value of a policy class.  In some cases the policy class
@@ -719,7 +784,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
       insert(const_iterator __hint, const value_type& __v)
       {
 	__hashtable& __h = _M_conjure_hashtable();
-	__node_gen_type __node_gen(__h);	
+	__node_gen_type __node_gen(__h);
 	return __h._M_insert(__hint, __v, __node_gen, __unique_keys());
       }
 
@@ -1899,7 +1964,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
       using __value_alloc_traits = std::allocator_traits<__value_alloc_type>;
 
       using __node_base = __detail::_Hash_node_base;
-      using __bucket_type = __node_base*;      
+      using __bucket_type = __node_base*;
       using __bucket_alloc_type =
 	__alloc_rebind<__node_alloc_type, __bucket_type>;
       using __bucket_alloc_traits = std::allocator_traits<__bucket_alloc_type>;
-- 
2.1.0

